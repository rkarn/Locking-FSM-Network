
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_Standard(

	//////////// CLOCK //////////
//	input 		          		CLOCK2_50,
//	input 		          		CLOCK3_50,
//	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	//input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		 reg    [9:0]		LEDR

	//////////// Seg7 //////////
//	output		     [6:0]		HEX0,
//	output		     [6:0]		HEX1,
//	output		     [6:0]		HEX2,
//	output		     [6:0]		HEX3,
//	output		     [6:0]		HEX4,
//	output		     [6:0]		HEX5,

	//////////// GPIO, GPIO connect to GPIO Default //////////
//	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
//wire RxD;
wire reset, ip_stream_valid;
reg [7:0] input_xt_stream;
reg input_xt;
parameter FSM_state_N = 8;
parameter psi_0 = 3'b000;
parameter psi_1 = 3'b001;
parameter psi_2 = 3'b010;
parameter psi_3 = 3'b011;
parameter psi_4 = 3'b100;
parameter psi_5 = 3'b101;
parameter psi_6 = 3'b110;
parameter psi_7 = 3'b111;

reg [2:0] next_state;
reg [2:0] current_state;
reg [2:0] num_xt_sampled;
reg [2:0] FSM_output;



//=======================================================
//  Structural coding
//=======================================================

		  
								  
//assign RxD = GPIO[0];  //UART receiver pin for FPGA
// GPIO[1];  //UART transmitter Pin for FPGA
assign reset = SW[0];
assign ip_stream_valid = SW[9];

always @ (posedge CLOCK_50)
begin
	if (ip_stream_valid==1 && reset == 0)
		begin
			input_xt_stream <= SW[8:1];
		end
		
	if (num_xt_sampled == 3'b111)
		begin
			FSM_output <= current_state;
			LEDR <= current_state;
		end

		
	if (reset == 1 && ip_stream_valid == 0)
		begin
			next_state <= 0;
			input_xt <= input_xt_stream[0];
			num_xt_sampled <= 0;
			current_state <= 0;
		end
	else
	begin
		case(next_state)
			psi_0: begin if(input_xt == 0) 
								begin next_state<= psi_0; end 
			             else 
								begin next_state<= psi_1; end 
					 input_xt <= input_xt_stream[0];
					 input_xt_stream <= input_xt_stream >> 1; 
					 num_xt_sampled <= num_xt_sampled+1;
					 current_state <= psi_0;
					 end
					 
			psi_1: begin if(input_xt == 0) 
								begin next_state<= psi_0; end 
			             else 
								begin next_state<= psi_2; end 
					 input_xt <= input_xt_stream[0];
					 input_xt_stream <= input_xt_stream >> 1;
					 num_xt_sampled <= num_xt_sampled+1;
					 current_state <= psi_1;
					 end					 
					 
			psi_2: begin if(input_xt == 0) 
								begin next_state<= psi_1; end 
			             else 
								begin next_state<= psi_3; end 
					 input_xt <= input_xt_stream[0];
					 input_xt_stream <= input_xt_stream >> 1;
					 num_xt_sampled <= num_xt_sampled+1;
					 current_state <= psi_2;
					 end
					 
			psi_3: begin if(input_xt == 0) 
								begin next_state<= psi_2; end 
			             else 
								begin next_state<= psi_4; end 
					 input_xt <= input_xt_stream[0];
					 input_xt_stream <= input_xt_stream >> 1;
					 num_xt_sampled <= num_xt_sampled+1;
					 current_state <= psi_3;
					 end
					 
			psi_4: begin if(input_xt == 0) 
								begin next_state<= psi_3; end 
			             else 
								begin next_state<= psi_5; end 
					 input_xt <= input_xt_stream[0];
					 input_xt_stream <= input_xt_stream >> 1;
					 num_xt_sampled <= num_xt_sampled+1;
					 current_state <= psi_4;
					 end
					 
			psi_5: begin if(input_xt == 0) 
								begin next_state<= psi_4; end 
			             else 
								begin next_state<= psi_6; end 
					 input_xt <= input_xt_stream[0];
					 input_xt_stream <= input_xt_stream >> 1;
					 num_xt_sampled <= num_xt_sampled+1;
					 current_state <= psi_5;
					 end
					 
			psi_6: begin if(input_xt == 0) 
								begin next_state<= psi_5; end 
			             else 
								begin next_state<= psi_7; end 
					 input_xt <= input_xt_stream[0];
					 input_xt_stream <= input_xt_stream >> 1;
					 num_xt_sampled <= num_xt_sampled+1;
					 current_state <= psi_6;
					 end
					 
			psi_7: begin if(input_xt == 0) 
								begin next_state<= psi_6; end 
			             else 
								begin next_state<= psi_7; end 
					 input_xt <= input_xt_stream[0];
					 input_xt_stream <= input_xt_stream >> 1;
					 num_xt_sampled <= num_xt_sampled+1;
					 current_state <= psi_7;
					 end
					 
		endcase
	end

end





endmodule


